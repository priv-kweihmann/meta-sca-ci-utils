#!/usr/bin/env python3
# SPDX-License-Identifier: BSD-2-Clause
# Copyright (c) 2021, Konrad Weihmann

import argparse
import glob
import os
import re
import subprocess

import github3


def create_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument("--rulesdir", default=None,
                        help="additional rules dir")
    parser.add_argument("--configfile", default=None,
                        help="addtional configuration file")
    parser.add_argument("--constantfile", default=None,
                        help="addtional constants file")
    parser.add_argument(
        "--token", default=os.environ.get("EXPORT_BOT_WEBSECRET", ""), help="GitHub token")
    parser.add_argument("--pullrequest", default=os.environ.get("GITHUB_EVENT_PATH", "abc"), help="id of pullrequest")
    parser.add_argument("sources", help="source dir to scan")
    parser.add_argument("username", help="GitHub username")
    parser.add_argument("ghuser", help="github profile of repo")
    parser.add_argument("repo", help="name of the repo")

    _tmp = parser.parse_args()
    # try to look at what has been passed a reference
    if not _tmp.pullrequest.isdigit():
        import json
        try:
            with open(_tmp.pullrequest) as i:
                _cnt = json.read(i)
                _tmp.pullrequest = _cnt["pull_request"]["number"]
        except:
            pass
    return _tmp


def run_tool(args, pullreq):
    _args = ["oelint-adv"]
    if args.rulesdir:
        _args += ["--customrules={}".format(args.rulesdir)]
    if args.constantfile:
        _args += ["--constantfile={}".format(args.constantfile)]
    if args.configfile:
        _args += ["--rulefile={}".format(args.configfile)]
    for _f in pullreq.files():
        _fullpath = os.path.join(args.sources, _f.filename.lstrip("/"))
        _path, _ext = os.path.splitext(_fullpath)
        if _ext in [".bb", ".bbappend"]:
            _args.append(_fullpath)
    try:
        out = subprocess.check_output(
            _args, universal_newlines=True, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        out = e.stdout or ""
    return out


def create_findings(args, pullreq):
    _input = run_tool(args, pullreq)
    _findings = []
    pattern = r"^(?P<file>.*?):(?P<line>\d+):(?P<severity>(warning|error|info)):(?P<id>.*?):(?P<message>.*)$"
    for m in re.finditer(pattern, _input, re.MULTILINE):
        _findings.append({
            "position": int(m.group("line")),
            "path": os.path.relpath(m.group("file"), args.sources),
            "body": "potential issue: " + m.group("message"),
            "commit_id": pullreq.head.sha
        })
    return _findings


def post_findings(args, pullreq):
    for f in create_findings(args, pullreq):
        try:
            pullreq.create_review_comment(
                f["body"], f["commit_id"], f["path"], f["position"])
        except:
            pass


def get_pullrequest(args):
    login = github3.login(args.username, args.token)
    repo = login.repository(args.ghuser, args.repo)
    return repo.pull_request(args.pullrequest)


def main():
    _args = create_parser()
    post_findings(_args, get_pullrequest(_args))
    pass


if __name__ == '__main__':
    main()
